#!/usr/bin/env bash
# This file only contains functions that assist with writing service files
# (/etc/init.d/* files).
#
# To use this properly, you would make your init.d/service-name file look
# a bit like the example.
#
# Examples
#
#     #!/usr/bin/env bash
#     #
#     # Description of your service goes here
#
#     # Define NAME
#     NAME=service-name
#
#     # Load functions and set some environment variables
#     . /usr/local/lib/wick-init-d-lib
#
#     # Override the processStart command
#     processStart() {
#         /usr/bin/consul agent -config-dir /etc/consul.d >> "$1" 2>&1 &
#         disown %+
#         echo "$!" > "$2"
#     }
#
#     handleCommand

# Save a copy of the command we will handle
COMMAND="$1"

# Configurable settings
LOGFILE="/var/log/$NAME.log"
PIDFILE="/var/run/$NAME.pid"
LOCKFILE="/var/lock/subsys/$NAME"

# Removes files that are used while the system is running.
#
# Examples
#
#   cleanupFiles
#
# Returns nothing.
cleanupFiles() {
    rm -f "$PIDFILE" "$LOCKFILE"
}


# Writes the PID to stdout.  By default this will get the PID from the
# PIDFILE.
#
# Examples
#
#   getPid
#
# Returns nothing.
getPid() {
    cat "$PIDFILE"
}


# Deprecated
#
# When this is used, it will also rename all hyphenated functions to
# non-hyphenated functions.
#
# Examples
#
#   handle-command
#
# Returns nothing.
handle-command() {
    renameFunction cleanup-files cleanupFiles
    renameFunction get-pid getPid
    renameFunction is-running isRunning
    renameFunction process-reload process-reload
    renameFunction process-start processStart
    renameFunction process-stop processStop
    renameFunction reload-before reloadBefore
    renameFunction reload-fail reloadFail
    renameFunction reload-success reloadSuccess
    renameFunction restart-before restartBefore
    renameFunction restart-fail restartFail
    renameFunction restart-success restartSuccess
    renameFunction start-before startBefore
    renameFunction start-fail startFail
    renameFunction start-success startSuccess
    renameFunction stop-before stopBefore
    renameFunction stop-fail stopFail
    renameFunction stop-success stopSuccess
    handleCommand
    return $?
}

# Handles the command that was issued to the script.  Does that by calling
# other functions that happen to just map to the command name.
#
# Examples
#
#   handleCommand
#
# Returns nothing.
handleCommand() {
    case "$COMMAND" in
        start)
            start
            ;;

        stop)
            stop
            ;;

        restart)
            restart
            ;;

        reload)
            reload
            ;;

        status)
            status
            ;;

        *)
            help
            ;;
    esac

    exit $?
}


# Shows a help message.
#
# Examples
#
#   help
#
# Returns 1 (failure) always.
help() {
    echo "Usage: $NAME {start|stop|restart|reload|status}" >&2
    exit 1
}


# Determines if the process is running.  By default this checks that the
# PIDFILE exists and that there is a process running with that PID.
#
# Examples
#
#   if isRunning; then
#       echo "It is running"
#   fi
#
# Returns 1 (failure) when it is off, 0 (success) when it is running.
isRunning() {
    if [[ ! -f "$PIDFILE" ]]; then
        return 1
    fi

    if ! ps `getPid` > /dev/null 2>&1; then
        cleanupFiles
        return 1
    fi

    return 0
}


# Reloads the process.  By default this will send a HUP (hangup) signal to
# the process.
#
# Examples
#
#   processReload
#
# Returns nothing.
processReload() {
    kill -HUP `getPid`
}


# Start the process.
#
# At a minimum, you must override this function.
#
# $1 - Log file to use
# $2 - PID file to write
#
# Examples
#
#   processStart /var/log/my-service.log /var/run/my-service
#
# Returns true on success
processStart() {
    echo "Misconfigured init script"
    echo "This function must be overridden"
    exit 1
}


# Stop the process.  By default this kills the PID.
#
# Examples
#
#   processStop
#
# Returns nothing.
processStop() {
    kill -INT `getPid`
}


# Reloads the process.  Checks to make sure it is running, executes hooks
# and reloads the process.  You should redefine one of the other functions
# instead of this one.
#
# Examples
#
#   reload
#
# Returns nothing.
reload() {
    if ! isRunning; then
        echo "$NAME is not running"
        return 0
    fi

    echo -n "Reloading $NAME ..."
    reloadBefore
    processReload

    if ! isRunning; then
        echo " $NAME has died, see $LOGFILE"
        reloadFail
        return 1
    fi

    echo " ok"
    reloadSuccess
}


# Hook to allow extra functionality before reloading a process.
#
# Examples
#
#   reloadBefore
#
# Returns nothing.
reloadBefore() {
    :
}


# Hook to allow extra functionality when a reload fails.
#
# Examples
#
#   reloadFail
#
# Returns nothing.
reloadFail() {
    :
}


# Hook to allow extra functionality when a reload succeeds.
#
# Examples
#
#   reloadSuccess
#
# Returns nothing.
reloadSuccess() {
    :
}


# Deprecated: Changes the non-hyphenated function so that it merely calls
# through to the old, hyphenated function name.  This acts like a rename
# without doing a lot of string processing.
#
# $1 - Old name.
# $2 - New name.
#
# Examples
#
#   renameFunction cleanup-files cleanupFiles
#
# Returns nothing.
renameFunction() {
    local functionList functionName

    functionList=$(declare -F)
    functionList=( ${functionList//declare -f /} )

    for functionName in "${functionList[@]}"; do
        if [[ "$functionName" == "$1" ]]; then
            # Make the new name simply call through to the old name.
            eval "$2 () { $1 \"\$@\" ; return \$? ; }"
            return 0
        fi
    done

    # Write a call through wrapper the other way so they can call the
    # old name and it transparently calls to the new name.
    eval "$1 () { $2 \"\$@\" ; return \$? ; }"
}


# Restarts the process.  Checks to make sure it is running, executes hooks
# and restarts the process.  You should redefine one of the other functions
# instead of this one.
#
# Examples
#
#   restart
#
# Returns nothing.
restart() {
    restartBefore
    stop

    if isRunning; then
        echo "Unable to stop $NAME, will not attempt to start."
        restartFail
        return 1
    fi

    start

    if [[ $? -ne 0 ]]; then
        restartFail
        return 2
    fi

    restartSuccess || return 3
}


# Hook to allow extra functionality before restarting a process.
#
# Examples
#
#   restartBefore
#
# Returns nothing.
restartBefore() {
    :
}


# Hook to allow extra functionality when a restart fails.
#
# Examples
#
#   restartFail
#
# Returns nothing.
restartFail() {
    :
}


# Hook to allow extra functionality when a restart succeeds.
#
# Examples
#
#   restartSuccess
#
# Returns nothing.
restartSuccess() {
    :
}


# Start the process.  Typically you should override other functions in
# order to take different actions.
#
# Examples
#
#   start
#
# Returns true on success, or different failure status codes.
start() {
    local PID

    if isRunning; then
        echo "$NAME already running"
        return 1
    fi

    echo -n "Starting $NAME ..."
    startBefore
    processStart "$LOGFILE" "$PIDFILE"

    if ! isRunning; then
        echo " unable to start $NAME, see $LOGFILE"
        startFail
        return 1
    fi

    echo " ok"
    touch "/var/lock/subsys/$NAME"
    startSuccess || return 3
}


# Hook to allow extra functionality before starting a process.
#
# Examples
#
#   startBefore
#
# Returns nothing.
startBefore() {
    :
}


# Hook to allow extra functionality when a start fails.
#
# Examples
#
#   startFail
#
# Returns nothing.
startFail() {
    :
}


# Hook to allow extra functionality when a start succeeds.
#
# Examples
#
#   startSuccess
#
# Returns nothing.
startSuccess() {
    :
}


# Determine if the current process is running.  Writes the status to stdout
# and returns a status code indicative of the state of the process.
#
# Examples
#
#   status
#
# Returns true if the process is running, 1 if the process is not running.
status() {
    if isRunning; then
        echo "$NAME is running"
    else
        echo "$NAME is stopped"
        return 1
    fi
}


# Stops the process if it is running.  Instead of overriding this function,
# you should override one of the other functions that this one calls.
#
# Examples
#
#   stop
#
# Returns true on success (it was stopped or was never running).  Returns
# different status codes for different reasons the process did not stop.
stop() {
    if ! isRunning; then
        echo "$NAME not running"
        return 0
    fi

    echo -n "Stopping $NAME ..."
    stopBefore
    processStop

    for I in {1..10}; do
        if ! isRunning; then
            break
        fi

        sleep 1
        echo -n "."
    done

    if isRunning; then
        echo " $NAME not stopped; may still be shutting down or shutdown may have failed - see $LOGFILE"
        stopFail
        return 1
    fi

    echo " stopped"
    cleanupFiles
    stopSuccess || return 3
}


# Hook to allow extra functionality before stopping a process.
#
# Examples
#
#   stopBefore
#
# Returns nothing.
stopBefore() {
    :
}


# Hook to allow extra functionality when stopping failed.
#
# Examples
#
#   stopFail
#
# Returns nothing.
stopFail() {
    :
}


# Hook to allow extra functionality when stopping succeeded.
#
# Examples
#
#   stopSuccess
#
# Returns nothing.
stopSuccess() {
    :
}

