#!/usr/bin/env bash
# Creates a directory on the target machine.
#
# *Only the last folder will have its ownership changed.*  See the examples for
# further information.
#
# $1            - The directory to create.
# --mode=MODE   - Optional, specify a mode for the directory.  Uses `chmod`
#                 syntax.
# --owner=OWNER - Optional, specify an owner for the directory.  Uses `chown`
#                 syntax.
#
# The directory is created with `mkdir -p` so all parent directories would also
# be created if they do not exist.  The ownership and mode are only changed on
# the specified path, not all parents.
#
# When specified, the mode and owner are always applied, even if the directory
# already existed.
#
# Examples:
#
#   # Creates /etc/consul.d (/etc already existed) with the mode 0755
#   # and make consul the owner.
#   wickMakeDir --mode=0755 --owner=consul:consul /etc/consul.d
#
#   # Creates a folder named /a/b/c/d/ and changes the ownership of
#   # /a/b/c/d/ to nobody:nogroup.  NOTE: All of the parent directories
#   # will be created automatically if they didn't already exist and
#   # they will be owned by root:root, NOT nobody:nogroup.
#   wickMakeDir --owner nobody:nogroup /a/b/c/d/
#
# Returns nothing.
wickMakeDir() {
    local dest mode owner

    wickGetOption mode mode "$@" || return $?
    wickGetOption owner owner "$@" || return $?
    wickGetArgument dest 0 "$@" || return $?
    wickDebug "Making directory: $dest" || return $?
    mkdir -p "$dest" || return $?

    if [[ -n "$owner" ]]; then
        wickDebug "Changing ownership: $owner" || return $?
        chown "$owner" "$dest" || return $?
    fi

    if [[ -n "$mode" ]]; then
        wickDebug "Changing mode: $mode" || return $?
        chmod "$mode" "$dest" || return $?
    fi
}
