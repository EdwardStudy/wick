#!/usr/bin/env bash
# Public: Install or remove packages on the target system.  This handles the
# OS-specific tools that are used to install or remove the packages.  If the
# package is named differently on various systems, it is up to the formula to
# address that, such as with the apache2 formula.
#
# $1               - Name of package to manage, typically required.
# --clean          - Cleans the cache of packages on the system.
# --exists         - When set, returns true if the package exists.  Does not
#                    install nor uninstall any package.
# --uninstall      - When set, this will uninstall the package instead.
# --update         - When set, this updates the package lists. No packages
#                    will be installed or uninstalled.
# $YUM_ENABLE_REPO - Allows additional yum repositories.
#
# Uses the `YUM_ENABLE_REPO` environment variable if you need to enable
# additional yum repositories, such as [Remi's
# Repository](../yum-remi/README.md), which can sometimes be a little
# dangerous.  This is only used with yum-based systems.
#
# Examples
#
#   # Install apache2 - note that this must match for your OS/distro
#   wickPackage apache2
#
#   # Uninstall httpd
#   wickPackage --uninstall httpd
#
#   # Clean the package cache
#   wickPackage --clean
#
#   # Enable Remi's repository for this one package so we install a
#   # significantly newer version of Redis.
#   YUM_ENABLE_REPO=remi wickPackage redis
#
# Returns true on success for normal execution.  When `--exists` is used, this
# returns true if the specified package exists and is installed on the system.
wickPackage() {
    local clean exists os state uninstall unparsed update

    wickGetOption clean --clean "$@" || return $?
    wickGetOption exists --exists "$@" || return $?
    wickGetOption uninstall --uninstall "$@" || return $?
    wickGetOption update --update "$@" || return $?
    wickGetArguments unparsed "$@" || return $?

    # Intentionally append to state to flag errors
    state=""

    if [[ -n "$clean" ]]; then
        state="clean$state"
    fi

    if [[ -n "$exists" ]]; then
        state="exists$state"
    fi

    if [[ -n "$uninstall" ]]; then
        state="uninstall$state"
    fi

    if [[ -n "$update" ]]; then
        state="update$state"
    fi

    : "${state:=install}"

    wickExplorer os wick-base os || return $?

    case "$os" in
        arch)
            wickPackagePacman "$state" "${unparsed[@]-}" || return $?
            ;;

        centos|redhat)
            wickPackageYum "$state" "${unparsed[@]-}" || return $?
            ;;

        ubuntu|debian)
            wickPackageApt "$state" "${unparsed[@]-}" || return $?
            ;;

        *)
            wickError "Unable to determine package manager" || return $?

            return 1
            ;;
    esac
}
