#!/usr/bin/env bash
# Create or manage a user on the system.
#
# $1            - Username to create on the system
# --daemon      - Optional; flag to indicate reasonable settings should be
#                 assigned for a daemon account.  See the examples.
# --home=HOME   - Optional; set the home directory for the user.
# --move-home   - Optional; move a home directory for a user that already
#                 exists when this flag is used.
# --name=NAME   - Optional; full name for the account.
# --no-skel     - Optional; will prevent skeleton files from being copied when
#                 this flag is used.
# --shell=SHELL - Optional; set a shell that isn't the default for the user.
# --system      - Optional; uses a lower user ID when available when creating
#                 the user.
#
# For consistency, the home directory is always created if it does not exist
# and the ownership of the home directory is always set to `USERNAME:USERNAME`.
# If the given user already exists and no options are given `usermod` will not
# be run.
#
# Examples
#
#   # Create a normal user.
#   wickMakeUser fidian
#
#   # Update that same user with a new shell.
#   wickMakeUser --shell=/bin/zsh
#
#   # Create a system account that can't login.  It is used to
#   # run a special server that's installed in /opt/myserver.
#   wickMakeUser --home=/opt/myserver --name="MyServer" \
#       --shell=/bin/false --no-skel --system myserver
#
#   # The exact same command but it uses --daemon to specify
#   # several options automatically.
#   # --daemon enables --no-skel --system and disables --move-home
#   wickMakeUser --daemon --home=/opt/myserver --name="MyServer" myserver
#
# Returns zero on success, one if required arguments are not passed in.
wickMakeUser() {
    local args daemonFlag moveHomeFlag noSkelFlag passwd setHome setName setShell systemFlag userhome username

    wickGetOption daemonFlag daemon "$@"
    wickGetOption setHome home "$@"
    wickGetOption moveHomeFlag move-home "$@"
    wickGetOption setName name "$@"
    wickGetOption noSkelFlag no-skel "$@"
    wickGetOption setShell shell "$@"
    wickGetOption systemFlag system "$@"
    wickGetArgument username 0 "$@"

    if [[ -z "$username" ]]; then
        wickError "You must specify a username for wickMakeUser"

        return 1
    fi

    # Set reasonable defaults for daemons.
    if [[ -n "$daemonFlag" ]]; then
        moveHomeFlag=""
        noSkelFlag=true
        setShell=/bin/false
        systemFlag=true
    fi

    passwd=$(getent passwd "$username" || true)

    if [[ -z "$passwd" ]]; then
        wickInfo "Creating user: $username"
        args=(useradd)

        if [[ -n "$setHome" ]]; then
            args[${#args[@]}]=-d
            args[${#args[@]}]="$setHome"
        fi

        if [[ -n "$setName" ]]; then
            args[${#args[@]}]=-c
            args[${#args[@]}]="$setName"
        fi

        if [[ -n "$noSkelFlag" ]]; then
            args[${#args[@]}]=-M
        fi

        if [[ -n "$setShell" ]]; then
            args[${#args[@]}]=-s
            args[${#args[@]}]="$setShell"
        fi

        if [[ -n "$systemFlag" ]]; then
            args[${#args[@]}]=-r
        fi

        args[${#args[@]}]=$username
        wickDebug "Command:" "${args[@]}"
        "${args[@]}"
    else
        wickInfo "Altering user: $username"
        args=(usermod)

        if [[ -n "$setHome" ]]; then
            args[${#args[@]}]=-d
            args[${#args[@]}]="$setHome"
        fi

        if [[ -n "$moveHomeFlag" ]]; then
            args[${#args[@]}]=-m
        fi

        if [[ -n "$setName" ]]; then
            args[${#args[@]}]=-c
            args[${#args[@]}]="$setName"
        fi

        if [[ -n "$setShell" ]]; then
            args[${#args[@]}]=-s
            args[${#args[@]}]="$setShell"
        fi

        if [[ "${#args[@]}" -gt 1 ]]; then
            args[${#args[@]}]="$username"
            wickDebug "Command:" "${args[@]}"
            "${args[@]}"
        else
            wickInfo "Provided user exists and no options were given, continuing on without altering user."
        fi
    fi

    userhome=$(getent passwd "$username" | cut -d : -f 6)
    wickMakeDir --owner="$username:$username" --mode=0755 "$userhome"
}
