#!/usr/bin/env bash
# Internal: Write a log message to a file or to a logging system.  Used by `wickDebug`, `wickInfo`, `wickWarn` and `wickError`.  Should not be used directly.
#
# $1            - Log level.  One of ERROR WARN INFO DEBUG.
# $2            - The message to write.
# $WICK_LOGFILE - Destination for log messages.
#
# Uses the environment variable `$WICK_LOGFILE` to determine where to log
# messages.  Will write a timestamped messsage to that file, creating the file
# if necessary.  If `$WICK_LOGFILE` starts with "syslog:", this will use the
# `logger` command to write a line to syslogd.  The facility defaults to user,
# but you can use any facility; for example you can use the mail facility by
# setting `WICK_LOGFILE="syslog:mail"`.
# Additionally you can set a the tag by adding a second ":" followed by the 
# desired tag; for example you can set the tag to myapp by setting 
# `WICK_LOGFILE="syslog::myapp".
#
# Otherwise, `$WICK_LOGFILE` should be set to a filename.  Messages are
# prefixed with a timestamp.
#
# Examples
#
#   # Run a command that logs with other Wick functions.
#   # Send output to /var/log/messages
#   WICK_LOGFILE=/var/log/messages ./your-command
#
#   # Send messages to /var/log/syslog
#   WICK_LOGFILE=syslog:daemon ./my-background-thing
#
# Returns nothing.
wickLog() {
    local logLevel output facility priority tag

    logLevel=$1

    if [[ -z "${WICK_LOGFILE-}" ]]; then
        return
    fi

    if [[ "${WICK_LOGFILE:0:7}" == "syslog:" ]]; then
        facility=${WICK_LOGFILE:7}
        tag=${facility#*:}

        if [[ "$facility" == "$tag" ]]; then
            tag=""
        fi

        facility=${facility%%:*}

        if [[ -z "$facility" ]]; then
            facility="user"
        fi

        case "$logLevel" in
            ERROR)
                priority="err"
                ;;

            WARN)
                priority="warning"
                ;;

            INFO)
                priority="info"
                ;;

            DEBUG)
                priority="debug"
                ;;
        esac

        loggerCmd=(logger -p "$facility"."$priority")

        if [[ -n "$tag" ]]; then
            loggerCmd[${#loggerCmd[@]}]=-t
            loggerCmd[${#loggerCmd[@]}]=$tag
        fi

        loggerCmd[${#loggerCmd[@]}]=--
        loggerCmd[${#loggerCmd[@]}]=$2
        "${loggerCmd[@]}"

    elif [[ -n "$WICK_LOGFILE" ]]; then
        wickPrefixLines output "$(date -Iseconds) $logLevel: " "$2"
        echo "$output" >> "$WICK_LOGFILE"
    fi
}
