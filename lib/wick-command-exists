#!/usr/bin/env bash
# Public: Tests to see if a command is in the path.  Because some systems
# report failure in different ways, this is an attempt to abstract away those
# alternate error messages and provide a consistent interface.
#
# This differs from using `hash` in that `hash` will return success if there
# is a function with the given name.  Using `which` will return an error.
#
# $1 - Name of the command you wish to execute.  It would not make sense to
#      use a full path here since the intent is to search the `PATH` for
#      the command.
#
# Examples
#
#   if ! wickCommandExists ls; then
#       echo 'Oh no, ls does not exist!'
#       echo 'How do you list your files?'
#
#       exit 1
#   fi
#
#   # Show the difference between hash and which
#   hash wickCommandExists || echo "hash succeeds with function names"
#   wickCommandExists wickCommandExists || echo "this will fail with functions"
#
# Returns 0 when found and an error status when the command was not found.
wickCommandExists() {
    local result

    if [[ -z "${1-}" ]]; then
        return 5
    fi

    # Command failed to execute or reported failure
    if ! result=$(which "${1-}" 2>&1); then
        return 1
    fi

    # Empty output means it was not found
    if [[ -z "$result" ]]; then
        return 6
    fi

    # Some OSs report "no PROGRAM_NAME"
    if [[ "$result" == "no "* ]]; then
        return 2
    fi

    # Other OSs report "PROGRAM_NAME: no such program" or similar messages
    if [[ "$result" == *": no "* ]]; then
        return 3
    fi

    # Other times you can get "command not found"
    if [[ "$result" == *"command not found"* ]]; then
        return 4
    fi

    return 0
}
