#!/usr/bin/env bash
# Public: Wait a given amount of time for a shell script to return success,
# waiting 1 second between calls.  If the time elapses without any successful
# response then this returns failure.  Otherwise this returns success.
#
# $1   - Timeout, specified in seconds.
# $2-@ - The command and arguments to pass to the command.
#
# If the timeout is reached, the running command is killed and `wickWaitFor`
# will return failure.  Otherwise, `wickWaitFor` will return the status code
# from the command.
#
# The command is executed directly.  Bash built-ins will not work.  Instead
# of using `[[`, you must resort to `test`, `[` or writing a function that
# can be called.
#
# Examples
#
#   /usr/local/bin/some-other-process &
#
#   # Wait up to 30 seconds for a file to exist
#   # You must use a shell command here.  Bash built-ins won't work,
#   # so use `[` or `test` instead of `[[`.
#   if ! wickWaitFor 30 [ -f /var/run/other-process/run.lock ]; then
#       echo "File was not created in time"
#       exit 1
#   fi
#
# Returns the command's status code.  The command may have been killed and
# will typically return failure in that scenario.
wickWaitFor() {
    local latchProcess result sleepProcess sleepTime

    sleepTime=$1
    shift

    # Run everything in a subshell to automatically enable monitor mode (set +m)
    (
        # The latch
        (
            while ! "$@"; do
                echo "latch fail"
                sleep 1
            done
            echo "latch success"
        ) > /dev/null 2>&1 &
        latchProcess=$!

        # The timeout
        (
            sleep $sleepTime
            kill "$latchProcess"
        ) > /dev/null 2>&1 &
        sleepProcess=$!

        # Delay until one of the processes finish
        # Avoid "wait -n" because older bash does not support it
        # This also hides a "Terminated" message
        wait $latchProcess > /dev/null 2>&1
        result=$?

        # On success, the timeout process is likely still running
        if [[ $result -eq 0 ]]; then
            kill $sleepProcess > /dev/null 2>&1
        fi

        # Clean up and hide the "Terminated" message from killing bash
        wait $sleepProcess > /dev/null 2>&1

        return $result
    ) || return 1
}
