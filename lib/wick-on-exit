#!/usr/bin/env bash
# Public: Run a command when the currently executing script or subshell ends.
#
# $1   - The command to execute.
# $2-@ - Optional arguments to pass to the command.
#
# Examples
#
#    # Download a file
#    wickGetUrl http://example.com/installer.tar.gz /tmp/installer.tar.gz
#
#    # When done, clean it up
#    wickOnExit rm -f /tmp/installer.tar.gz
#
# Returns nothing.
wickOnExit() {
    local cmd length name

    name="WICK_ON_EXIT_$BASHPID"

    if ! declare -p $name > /dev/null 2>&1; then
        eval "$name=()"
    fi

    # Note:  I am not a fan of eval.  If you have a better way to do this that
    # uses fewer evaluated statements that also works from Bash 3 through the
    # latest release and with "set -eu", then I'd LOVE to know.
    eval "length=\${#""$name""[@]}"
    wickArgumentString cmd "$@" || return $?
    wickDebug "Adding wickOnExit item [$BASHPID $length]: ${cmd}" || return $?
    eval "$name[$length]=\$cmd"

    # Always set or reset the trap
    trap wickOnExitTrap EXIT
}
