#!/usr/bin/env bash
# Public: Determines the IP address associated with a given network interface.
# If no interface is provided, this returns the IP address of the interface
# for the default route. If that does not work, the first IP address is
# returned, picked arbitrarily.
#
# $1 - Name of the variable that should receive the result.
# $2 - Optional, network interface name.  If not specified, defaults to the
#      first one returned by `ifconfig`.
#
# Examples
#
#   if ! wickGetIfaceIp ip tun0; then
#       echo "Tunnel is not yet established"
#
#       exit 1
#   fi
#
#   echo "Tunnel IP:  $ip"
#
# Returns 0 on success, non-zero on failure.
wickGetIfaceIp() {
    local interface list target

    wickGetArgument target 0 "$@" || return $?
    wickGetArgument interface 1 "$@" || return $?

    list=()

    if [[ -z "$interface" ]]; then
        # Try to detect the default interface.
        wickGetDefaultIface interface || :
    fi

    if wickCommandExists ip; then
        cmd=(ip addr show)

        if [[ -n "$interface" ]]; then
            cmd[${#cmd[@]}]="$interface"
        fi

        list=$("${cmd[@]}" 2>/dev/null | grep -oe "inet [0-9.]\+") || return $?
    elif wickCommandExists ifconfig; then
        cmd=(ifconfig -v)

        if [[ -n "$interface" ]]; then
            cmd[${#cmd[@]}]="$interface"
        fi

        list=$("${cmd[@]}" 2>/dev/null | grep -oe "inet\s\+[addr:]*[0-9\.]\+") || return $?
    else
        wickDebug "Couldn't find a command to look up ip addresses" || return $?

        return 2
    fi

    #: Filter to only keep the IP addresses.
    list=( $(echo "$list" | grep -oe "[0-9\.]\+") )

    if [[ "${#list[@]}" -lt 1 ]]; then
        return 1
    fi

    local "$target" && wickIndirect "$target" "${list[0]}"
}

