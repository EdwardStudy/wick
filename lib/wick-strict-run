#!/usr/bin/env bash
# Public: Runs a command and captures its return code, even when [strict mode]
# is enabled.  The variable name you specify is set to the return code of the
# command.
#
# $1   - Name of variable that should get the return value / status code.
# $2-@ - Command and arguments to run.
#
# This is intended to be used along with `wickStrictMode`.
#
# Example:
#
#   #!/usr/bin/env bash
#   . /usr/local/lib/wick-infect
#   wickStrictMode
#
#   wickStrictRun result grep "some-string" /etc/some-file.cfg > /dev/null 2>&1
#
#   if [[ $result -eq 0 ]]; then
#       wickInfo "some-string was found"
#   else
#       wickInfo "some-string was not found"
#   fi
#
# Returns nothing.
wickStrictRun() {
    local dest restoreErrors result

    dest=$1
    shift

    #: Gathering current settings and traps for ERR
    #: so we can restore them at will later.
    restoreErrors="set \"-$-\";$(trap -p ERR)"

    # Disabling errors only for executing this subshell.  For once,
    # we don't want it to exit if the subshell fails and we don't
    # want it logging a stack trace just for this line.  We do,
    # however, want strict mode enabled inside the subshell.
    set +eE
    trap "" ERR

    (
        eval "$restoreErrors"
        "$@"
    )

    result=$?
    eval "$restoreErrors"

    local "$dest" && wickIndirect "$dest" "$result"
}
